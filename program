#!/bin/bash

# ==================== SCRIPT DE PROGRAMACI√ìN AUTOM√ÅTICA ====================
# Programa cualquier archivo .asm en ATmega328P con Xplain Mini
# Uso: ./program archivo.asm
#      ./program simple_blink
#      ./program main.asm
# ==================== CONFIGURACI√ìN ====================

MCU="atmega328p"
PROGRAMMER="xplainedmini"
PORT="usb"

# Colores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ==================== FUNCIONES ====================

show_help() {
    echo -e "${GREEN}üöÄ Script de programaci√≥n autom√°tica para ATmega328P${NC}"
    echo -e "${YELLOW}üìã Uso:${NC}"
    echo "  ./program archivo.asm     - Programa archivo.asm"
    echo "  ./program archivo         - Programa archivo.asm (agrega .asm autom√°ticamente)"
    echo "  ./program -h              - Esta ayuda"
    echo ""
    echo -e "${YELLOW}üí° Ejemplos:${NC}"
    echo "  ./program simple_blink    - Compila y programa simple_blink.asm"
    echo "  ./program main.asm        - Compila y programa main.asm"
    echo "  ./program test            - Compila y programa test.asm"
    echo ""
    echo -e "${BLUE}‚öôÔ∏è  Hardware soportado:${NC}"
    echo "  - Xplain Mini ATmega328P"
    echo "  - Programador: ${PROGRAMMER}"
    echo "  - Puerto: ${PORT}"
}

error_exit() {
    echo -e "${RED}‚ùå Error: $1${NC}" >&2
    exit 1
}

program_chip() {
    local hex_file="$1"

    echo -e "${YELLOW}üöÄ Programando ATmega328P via Xplain Mini...${NC}"
    echo -e "${BLUE}‚ÑπÔ∏è  Aseg√∫rate de que la Xplain Mini est√© conectada${NC}"

    avrdude -c "$PROGRAMMER" -p "$MCU" -P "$PORT" -U flash:w:"$hex_file":i || error_exit "Error programando el chip"

    echo -e "${GREEN}‚úÖ Programaci√≥n exitosa!${NC}"
}

# ==================== PROGRAMA PRINCIPAL ====================

# Verificar argumentos
if [ $# -eq 0 ]; then
    echo -e "${RED}‚ùå Error: Falta el nombre del archivo${NC}"
    echo ""
    show_help
    exit 1
fi

# Mostrar ayuda
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_help
    exit 0
fi

# Obtener nombre del archivo
FILE="$1"

# Agregar extensi√≥n .asm si no la tiene
if [[ "$FILE" != *.asm ]]; then
    FILE="${FILE}.asm"
fi

# Buscar archivo en src/ o en ra√≠z
if [ -f "src/$FILE" ]; then
    FILEPATH="src/$FILE"
elif [ -f "$FILE" ]; then
    FILEPATH="$FILE"
else
    error_exit "Archivo '$FILE' no encontrado en src/ ni en ra√≠z"
fi

# Compilar
echo -e "${GREEN}üéØ Procesando archivo: $FILEPATH${NC}"

BASENAME=$(basename "$FILE" .asm)

# Crear carpeta build si no existe
BUILD_DIR="build"
mkdir -p "$BUILD_DIR"

echo -e "${YELLOW}üì¶ Compilando $FILEPATH...${NC}"

# Compilar (archivos generados van a build/)
avr-gcc -mmcu="$MCU" -Isrc -I. -x assembler-with-cpp -g -c "$FILEPATH" -o "${BUILD_DIR}/${BASENAME}.o" || error_exit "Error en compilaci√≥n"

# Enlazar
avr-gcc -mmcu="$MCU" "${BUILD_DIR}/${BASENAME}.o" -o "${BUILD_DIR}/${BASENAME}.elf" || error_exit "Error en enlazado"

# Crear HEX
avr-objcopy -j .text -j .data -O ihex "${BUILD_DIR}/${BASENAME}.elf" "${BUILD_DIR}/${BASENAME}.hex" || error_exit "Error creando HEX"

# Mostrar tama√±o
echo -e "${BLUE}üìè Tama√±o del programa:${NC}"
avr-size --format=avr --mcu="$MCU" "${BUILD_DIR}/${BASENAME}.elf"

echo -e "${GREEN}‚úÖ Compilaci√≥n exitosa: ${BUILD_DIR}/${BASENAME}.hex${NC}"

# Programar
program_chip "${BUILD_DIR}/${BASENAME}.hex"

echo -e "${GREEN}üéâ ¬°Proceso completado exitosamente!${NC}"
echo -e "${BLUE}üí° Tu c√≥digo est√° ahora ejecut√°ndose en el ATmega328P${NC}"
